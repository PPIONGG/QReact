/**
 * üõ†Ô∏è Screen Utilities - Functions ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô React Component
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡πÉ‡∏ô utility functions ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà React component
 * - ‡πÉ‡∏ô class components (‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ hooks ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
 * - ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ö‡∏ö one-time ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á real-time tracking
 * - ‡πÉ‡∏ô event handlers ‡∏´‡∏£‡∏∑‡∏≠ callback functions
 * 
 * ‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô React component ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ hooks ‡πÅ‡∏ó‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞ update ‡∏ï‡∏≠‡∏ô resize
 */

import { Breakpoint, DeviceType, ScreenInfo } from '../hooks/useWindowSize';

/**
 * üì± ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö one-time
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏ô utility function
 * - ‡πÄ‡∏ä‡πá‡∏Ñ retina display (pixelRatio > 1)
 * - ‡πÄ‡∏ä‡πá‡∏Ñ orientation ‡πÉ‡∏ô event handler
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const screenInfo = getScreenInfo();
 * if (screenInfo.pixelRatio > 1) { // retina display
 *   loadHighResImages();
 * }
 */
export const getScreenInfo = (): ScreenInfo => {
  if (typeof window === 'undefined') {
    return {
      width: 1200,
      height: 800,
      availableWidth: 1200,
      availableHeight: 800,
      screenWidth: 1200,
      screenHeight: 800,
      pixelRatio: 1,
      orientation: 'landscape'
    };
  }

  return {
    width: window.innerWidth,
    height: window.innerHeight,
    availableWidth: window.screen.availWidth,
    availableHeight: window.screen.availHeight,
    screenWidth: window.screen.width,
    screenHeight: window.screen.height,
    pixelRatio: window.devicePixelRatio,
    orientation: window.innerWidth > window.innerHeight ? 'landscape' : 'portrait'
  };
};

/**
 * üìè ‡πÄ‡∏ä‡πá‡∏Ñ breakpoint ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡πÄ‡∏ä‡πá‡∏Ñ breakpoint ‡πÉ‡∏ô utility function
 * - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì layout ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà component ‡∏à‡∏∞ render
 * - ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô server-side ‡∏´‡∏£‡∏∑‡∏≠ static generation
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const bp = getBreakpoint(1920); // 'xxl'
 * const columns = bp === 'xs' ? 1 : bp === 'sm' ? 2 : 4;
 * 
 * @param width - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ window.innerWidth)
 * @returns {Breakpoint} 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'
 */
export const getBreakpoint = (width: number = window?.innerWidth || 1200): Breakpoint => {
  if (width < 576) return 'xs';
  if (width < 768) return 'sm';
  if (width < 992) return 'md';
  if (width < 1200) return 'lg';
  if (width < 1600) return 'xl';
  return 'xxl';
};

/**
 * üì± ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô mobile ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô event handler ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
 * - conditional logic ‡πÉ‡∏ô utility functions
 * - validate ‡∏Å‡πà‡∏≠‡∏ô call mobile-specific APIs
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * if (isMobile()) {
 *   showMobileMenu();
 * }
 * 
 * @param width - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ window.innerWidth)
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤ < 768px
 */
export const isMobile = (width: number = window?.innerWidth || 1200): boolean => {
  return width < 768;
};

/**
 * üì± ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô tablet ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (768px - 1024px)
 */
export const isTablet = (width: number = window?.innerWidth || 1200): boolean => {
  return width >= 768 && width < 1024;
};

/**
 * üíª ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô desktop ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (> 1024px)
 */
export const isDesktop = (width: number = window?.innerWidth || 1200): boolean => {
  return width >= 1024;
};

/**
 * üéØ ‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const deviceType = getDeviceType(375); // 'mobile'
 * 
 * @param width - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
 * @returns {DeviceType} 'mobile' | 'tablet' | 'desktop'
 */
export const getDeviceType = (width: number = window?.innerWidth || 1200): DeviceType => {
  if (isMobile(width)) return 'mobile';
  if (isTablet(width)) return 'tablet';
  return 'desktop';
};

/**
 * üìê ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏Å elements ‡∏≠‡∏∑‡πà‡∏ô
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ô utility function (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà React component)
 * - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á real-time update
 * 
 * ‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö fixed (‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥) ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const height = calculateAvailableHeight(['.header', '.footer'], 20);
 * 
 * @param excludeSelectors - CSS selectors ‡∏Ç‡∏≠‡∏á elements ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡∏≠‡∏≠‡∏Å
 * @param bufferHeight - buffer ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ
 * @returns {number} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
 */
export const calculateAvailableHeight = (
  excludeSelectors: string[] = [],
  bufferHeight: number = 20
): number => {
  if (typeof window === 'undefined') return 400;
  
  let usedHeight = bufferHeight;
  
  excludeSelectors.forEach(selector => {
    const element = document.querySelector(selector);
    if (element) {
      const rect = element.getBoundingClientRect();
      usedHeight += rect.height;
    }
  });
  
  return window.innerHeight - usedHeight;
};

/**
 * üé® ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏° breakpoint (Advanced utility)
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏° breakpoint
 * - ‡∏™‡∏£‡πâ‡∏≤‡∏á responsive configuration
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const pageSize = getResponsiveValue(
 *   { xs: 3, sm: 5, lg: 10, xl: 15 },
 *   'lg',
 *   10
 * ); // ‡∏à‡∏∞‡πÑ‡∏î‡πâ 10
 * 
 * @param values - object ‡∏ó‡∏µ‡πà‡∏°‡∏µ key ‡πÄ‡∏õ‡πá‡∏ô breakpoint
 * @param currentBreakpoint - breakpoint ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 * @param fallback - ‡∏Ñ‡πà‡∏≤ default
 * @returns {T} ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö breakpoint
 */
export const getResponsiveValue = <T>(
  values: Partial<Record<Breakpoint, T>>,
  currentBreakpoint: Breakpoint,
  fallback: T
): T => {
  const breakpointOrder: Breakpoint[] = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
  const currentIndex = breakpointOrder.indexOf(currentBreakpoint);
  
  // Check current and smaller breakpoints
  for (let i = currentIndex; i >= 0; i--) {
    const bp = breakpointOrder[i];
    if (values[bp] !== undefined) {
      return values[bp]!;
    }
  }
  
  return fallback;
};

/**
 * üì∫ ‡∏™‡∏£‡πâ‡∏≤‡∏á CSS media query string (Advanced utility)
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡∏™‡∏£‡πâ‡∏≤‡∏á dynamic CSS
 * - ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö styled-components ‡∏´‡∏£‡∏∑‡∏≠ CSS-in-JS
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const mediaQuery = createMediaQuery('md'); 
 * // "(min-width: 768px) and (max-width: 991px)"
 * 
 * @param breakpoint - breakpoint ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
 * @returns {string} CSS media query string
 */
export const createMediaQuery = (breakpoint: Breakpoint): string => {
  const breakpoints = {
    xs: '(max-width: 575px)',
    sm: '(min-width: 576px) and (max-width: 767px)',
    md: '(min-width: 768px) and (max-width: 991px)',
    lg: '(min-width: 992px) and (max-width: 1199px)',
    xl: '(min-width: 1200px) and (max-width: 1599px)',
    xxl: '(min-width: 1600px)'
  };
  
  return breakpoints[breakpoint];
};

/**
 * üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ media query ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡πÄ‡∏ä‡πá‡∏Ñ media query ‡πÅ‡∏ö‡∏ö real-time
 * - ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö createMediaQuery
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const isMdScreen = matchMediaQuery('(min-width: 768px)');
 * 
 * @param query - CSS media query string
 * @returns {boolean} true ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 */
export const matchMediaQuery = (query: string): boolean => {
  if (typeof window === 'undefined') return false;
  return window.matchMedia(query).matches;
};