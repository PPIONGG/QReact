import { useState, useEffect } from 'react';

/**
 * Custom hooks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡∏∞ responsive design
 * 
 * ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
 * - useWindowSize(): ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏ö‡∏ö real-time
 * - useBreakpoint(): ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ï‡∏≤‡∏° Ant Design breakpoints
 * - useDeviceType(): ‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (mobile, tablet, desktop)
 * - useScreenInfo(): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô debug ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
 * - useDynamicHeight(): ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ö‡∏ö dynamic (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ scroll ‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏î‡∏µ)
 */

// Types
export interface WindowSize {
  width: number;   // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á viewport
  height: number;  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á viewport
}

export interface ScreenInfo extends WindowSize {
  availableWidth: number;   // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° taskbar)
  availableHeight: number;  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° taskbar)
  screenWidth: number;      // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  screenHeight: number;     // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  pixelRatio: number;       // ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô pixel (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retina display)
  orientation: 'landscape' | 'portrait'; // ‡πÅ‡∏ô‡∏ß‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
}

// Breakpoints ‡∏ï‡∏≤‡∏° Ant Design
export type Breakpoint = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
// xs: <576px, sm: 576-768px, md: 768-992px, lg: 992-1200px, xl: 1200-1600px, xxl: >1600px

export type DeviceType = 'mobile' | 'tablet' | 'desktop';

export interface DeviceInfo {
  isMobile: boolean;    // < 768px
  isTablet: boolean;    // 768px - 1024px
  isDesktop: boolean;   // > 1024px
  deviceType: DeviceType;
  breakpoint: Breakpoint;
}

/**
 * üî• Hook ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏ö‡∏ö real-time
 * - ‡∏ó‡∏≥ responsive design
 * - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î component ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const windowSize = useWindowSize();
 * const tableHeight = windowSize.height - 200; // ‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô header
 * 
 * @returns {WindowSize} { width, height }
 */
export const useWindowSize = (): WindowSize => {
  const [windowSize, setWindowSize] = useState<WindowSize>({
    width: typeof window !== 'undefined' ? window.innerWidth : 1200,
    height: typeof window !== 'undefined' ? window.innerHeight : 800,
  });

  useEffect(() => {
    if (typeof window === 'undefined') return;

    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return windowSize;
};

/**
 * üì± Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
 * - Debug responsive issues
 * - ‡πÄ‡∏ä‡πá‡∏Ñ retina display (pixelRatio)
 * - ‡πÄ‡∏ä‡πá‡∏Ñ orientation (‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á/‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô)
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const screenInfo = useScreenInfo();
 * if (screenInfo.orientation === 'portrait') { ... }
 * 
 * @returns {ScreenInfo} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export const useScreenInfo = (): ScreenInfo => {
  const { width, height } = useWindowSize();
  
  return {
    width,
    height,
    availableWidth: typeof window !== 'undefined' ? window.screen.availWidth : width,
    availableHeight: typeof window !== 'undefined' ? window.screen.availHeight : height,
    screenWidth: typeof window !== 'undefined' ? window.screen.width : width,
    screenHeight: typeof window !== 'undefined' ? window.screen.height : height,
    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio : 1,
    orientation: width > height ? 'landscape' : 'portrait'
  };
};

/**
 * üìè Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ breakpoint ‡∏ï‡∏≤‡∏° Ant Design
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô content ‡∏ï‡∏≤‡∏° breakpoint
 * - ‡∏õ‡∏£‡∏±‡∏ö layout ‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
 * - ‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Ant Design Grid system
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const breakpoint = useBreakpoint();
 * const columns = breakpoint === 'xs' ? 1 : breakpoint === 'sm' ? 2 : 3;
 * 
 * @returns {Breakpoint} 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'
 */
export const useBreakpoint = (): Breakpoint => {
  const { width } = useWindowSize();
  
  const getBreakpoint = (width: number): Breakpoint => {
    if (width < 576) return 'xs';
    if (width < 768) return 'sm';
    if (width < 992) return 'md';
    if (width < 1200) return 'lg';
    if (width < 1600) return 'xl';
    return 'xxl';
  };
  
  return getBreakpoint(width);
};

/**
 * üíªüì± Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ UI ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á mobile/tablet/desktop
 * - ‡∏ã‡πà‡∏≠‡∏ô/‡πÅ‡∏™‡∏î‡∏á features ‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
 * - ‡∏õ‡∏£‡∏±‡∏ö UX ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const { isMobile, isDesktop } = useDeviceType();
 * const pageSize = isMobile ? 5 : 10;
 * const showSidebar = !isMobile;
 * 
 * @returns {DeviceInfo} { isMobile, isTablet, isDesktop, deviceType, breakpoint }
 */
export const useDeviceType = (): DeviceInfo => {
  const { width } = useWindowSize();
  const breakpoint = useBreakpoint();
  
  const isMobile = width < 768;
  const isTablet = width >= 768 && width < 1024;
  const isDesktop = width >= 1024;
  
  const deviceType: DeviceType = isMobile ? 'mobile' : isTablet ? 'tablet' : 'desktop';
  
  return {
    isMobile,
    isTablet,
    isDesktop,
    deviceType,
    breakpoint
  };
};

/**
 * üìê Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ö‡∏ö dynamic
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Table ‡∏´‡∏£‡∏∑‡∏≠ content ‡∏ó‡∏µ‡πà‡∏°‡∏µ scroll ‡∏û‡∏≠‡∏î‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
 * - ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ fixed height
 * - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á elements ‡∏≠‡∏∑‡πà‡∏ô
 * 
 * ‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì (fixed calculation) ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏£‡∏ì‡∏µ
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const tableHeight = useDynamicHeight(['.header', '.footer'], 400, 20);
 * <Table scroll={{ y: tableHeight }} />
 * 
 * @param excludeSelectors - CSS selectors ‡∏Ç‡∏≠‡∏á elements ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡∏≠‡∏≠‡∏Å
 * @param minHeight - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (default: 300px)
 * @param bufferHeight - buffer ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ (default: 20px)
 * @returns {number} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
 */
export const useDynamicHeight = (
  excludeSelectors: string[] = [],
  minHeight: number = 300,
  bufferHeight: number = 20
): number => {
  const [availableHeight, setAvailableHeight] = useState(minHeight);
  const { height } = useWindowSize();
  
  useEffect(() => {
    const calculateHeight = () => {
      if (typeof window === 'undefined') return;
      
      let usedHeight = bufferHeight;
      
      excludeSelectors.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) {
          const rect = element.getBoundingClientRect();
          usedHeight += rect.height;
        }
      });
      
      const calculatedHeight = height - usedHeight;
      setAvailableHeight(Math.max(minHeight, calculatedHeight));
    };
    
    // Delay calculation to ensure DOM is ready
    const timeoutId = setTimeout(calculateHeight, 100);
    
    return () => clearTimeout(timeoutId);
  }, [height, excludeSelectors, minHeight, bufferHeight]);
  
  return availableHeight;
};

/**
 * üõ†Ô∏è Utility functions (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô React component)
 * 
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà:
 * - ‡πÉ‡∏ô utility functions ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà React component
 * - ‡πÉ‡∏ô class components
 * - ‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏ö‡∏ö one-time ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á real-time
 * 
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
 * const currentBreakpoint = getBreakpointFromWidth(1920); // 'xxl'
 * const isPhone = isMobileWidth(375); // true
 */

// Utility functions that can be used without hooks
export const getBreakpointFromWidth = (width: number): Breakpoint => {
  if (width < 576) return 'xs';
  if (width < 768) return 'sm';
  if (width < 992) return 'md';
  if (width < 1200) return 'lg';
  if (width < 1600) return 'xl';
  return 'xxl';
};

export const isMobileWidth = (width: number): boolean => width < 768;
export const isTabletWidth = (width: number): boolean => width >= 768 && width < 1024;
export const isDesktopWidth = (width: number): boolean => width >= 1024;